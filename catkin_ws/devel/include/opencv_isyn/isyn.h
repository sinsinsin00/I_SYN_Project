// Generated by gencpp from file opencv_isyn/isyn.msg
// DO NOT EDIT!


#ifndef OPENCV_ISYN_MESSAGE_ISYN_H
#define OPENCV_ISYN_MESSAGE_ISYN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace opencv_isyn
{
template <class ContainerAllocator>
struct isyn_
{
  typedef isyn_<ContainerAllocator> Type;

  isyn_()
    : isyn_stat(0)
    , detect_person_num(0)  {
    }
  isyn_(const ContainerAllocator& _alloc)
    : isyn_stat(0)
    , detect_person_num(0)  {
  (void)_alloc;
    }



   typedef int32_t _isyn_stat_type;
  _isyn_stat_type isyn_stat;

   typedef int32_t _detect_person_num_type;
  _detect_person_num_type detect_person_num;





  typedef boost::shared_ptr< ::opencv_isyn::isyn_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::opencv_isyn::isyn_<ContainerAllocator> const> ConstPtr;

}; // struct isyn_

typedef ::opencv_isyn::isyn_<std::allocator<void> > isyn;

typedef boost::shared_ptr< ::opencv_isyn::isyn > isynPtr;
typedef boost::shared_ptr< ::opencv_isyn::isyn const> isynConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::opencv_isyn::isyn_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::opencv_isyn::isyn_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace opencv_isyn

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'opencv_isyn': ['/home/ksshin/catkin_ws/src/opencv_isyn/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::opencv_isyn::isyn_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::opencv_isyn::isyn_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::opencv_isyn::isyn_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::opencv_isyn::isyn_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opencv_isyn::isyn_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opencv_isyn::isyn_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::opencv_isyn::isyn_<ContainerAllocator> >
{
  static const char* value()
  {
    return "53ead95707388c06e60c290dfef01194";
  }

  static const char* value(const ::opencv_isyn::isyn_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x53ead95707388c06ULL;
  static const uint64_t static_value2 = 0xe60c290dfef01194ULL;
};

template<class ContainerAllocator>
struct DataType< ::opencv_isyn::isyn_<ContainerAllocator> >
{
  static const char* value()
  {
    return "opencv_isyn/isyn";
  }

  static const char* value(const ::opencv_isyn::isyn_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::opencv_isyn::isyn_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 isyn_stat\n\
int32 detect_person_num\n\
\n\
";
  }

  static const char* value(const ::opencv_isyn::isyn_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::opencv_isyn::isyn_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.isyn_stat);
      stream.next(m.detect_person_num);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct isyn_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::opencv_isyn::isyn_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::opencv_isyn::isyn_<ContainerAllocator>& v)
  {
    s << indent << "isyn_stat: ";
    Printer<int32_t>::stream(s, indent + "  ", v.isyn_stat);
    s << indent << "detect_person_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.detect_person_num);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPENCV_ISYN_MESSAGE_ISYN_H
